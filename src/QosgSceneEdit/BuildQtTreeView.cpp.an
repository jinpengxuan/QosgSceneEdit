// OSG
#include <osg/Group>
#include <osg/Geode>
#include <osg/Billboard>
#include <osg/LOD>

// Project
#include "BuildMfcTreeView.h"

BuildMfcTreeView::BuildMfcTreeView(osg::Node *node)
: osg::NodeVisitor(osg::NodeVisitor::TRAVERSE_ALL_CHILDREN)
{
 //   TreeViewItem *item = new TreeViewItem();
 //   item->setText(0, QObject::tr("Root"));
 //   item->setIcon(0, QIcon(":/icons/TreeView/Group.png"));
	//item->setOsgNode(node);
	//item->setCheckState(0, Qt::Checked);
    //_parents.push(item);
    _maxTreeDepth = 0;
}

BuildMfcTreeView::~BuildQtTreeView()
{
}

void BuildMfcTreeView::apply(osg::Node& node)
{
    bool isGroup = false;
    //QString nodeName = QString::fromStdString(node.getName());
	CString nodeName(node.getName());

    if (nodeName.isEmpty())
    {
        nodeName = _T("<unnamed>");
    }

 //   TreeViewItem *item = new TreeViewItem(_parents.top());
 //   item->setText(0, nodeName);
	//item->setCheckState(0, Qt::Checked);
	//item->setOsgNode(&node);

    if (dynamic_cast<osg::LOD*>(&node))
    {
        //item->setIcon(0, QIcon(":/icons/TreeView/LOD.png"));
        //_parents.push(item);
        isGroup = true;
    } 
	else if (dynamic_cast<osg::Group*>(&node))
    {
        //item->setIcon(0, QIcon(":/icons/TreeView/Group.png"));
        //_parents.push(item);
        isGroup = true;
    } 
	else if (dynamic_cast<osg::Billboard*>(&node))
    {
        //item->setIcon(0, QIcon(":/icons/TreeView/Billboard.png"));
    } 
	else if (dynamic_cast<osg::Geode*>(&node))
    {
        //item->setIcon(0, QIcon(":/icons/TreeView/Geode.png"));
    } 
	else
    {
        //item->setIcon(0, QIcon(":/icons/TreeView/Other.png"));
    }

    _maxTreeDepth = std::max<int>(_maxTreeDepth, _parents.size());

    traverse(node);

    if (isGroup)
    {
        _parents.pop();
    }
}

int BuildMfcTreeView::getMaxTreeDepth() const
{
    return _maxTreeDepth;
}
